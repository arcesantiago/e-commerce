
services:
  productservice.api:
    image: productserviceapi
    build:
      context: ./ProductService
      dockerfile: ProductService.API/Dockerfile
    container_name: productservice.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
      - ConnectionStrings__DefaultConnection=Server=db;Database=ProductsDb;User Id=sa;Password=Your_strong!Passw0rd;Encrypt=False
    ports:
      - "8082:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - appnet

  orderservice.api:
    image: orderserviceapi
    build:
      context: ./OrderService
      dockerfile: OrderService.API/Dockerfile
    container_name: orderservice.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
      - ConnectionStrings__DefaultConnection=Server=db;Database=OrdersDb;User Id=sa;Password=Your_strong!Passw0rd;Encrypt=False
    ports:
      - "8081:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - appnet

  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Your_strong!Passw0rd
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "pgrep sqlservr"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s
    volumes:
      - mssql_data:/var/opt/mssql
    networks:
      - appnet

networks:
  appnet:
    driver: bridge

volumes:
  mssql_data:

