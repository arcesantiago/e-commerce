name: CI/CD - E-Commerce Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    name: Build & Test (Microservices)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Ejecutar Tests para ProductService
        # Apunta directamente al archivo .sln del servicio de Productos
        run: dotnet test ProductService/ProductService.sln --configuration Release --verbosity normal

      - name: Ejecutar Tests para OrderService
        # Apunta directamente al archivo .sln del servicio de Pedidos
        run: dotnet test OrderService/OrderService.sln --configuration Release --verbosity normal

      - name: Configurar variables de tag
        id: vars
        run: echo "SHA_TAG=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
        
      - name: Construir y Taggear ProductService
        run: |
          docker build -t productserviceapi:${{ steps.vars.outputs.SHA_TAG }} -f ProductService/ProductService.API/Dockerfile .

      - name: Construir y Taggear OrderService
        run: |
          docker build -t orderserviceapi:${{ steps.vars.outputs.SHA_TAG }} -f OrderService/OrderService.API/Dockerfile .
          
  deploy-staging:
    name: Despliegue a Staging
    runs-on: ubuntu-latest
    needs: build-test # Ejecuta solo si build-test fue exitoso
    environment: staging # Para protección de entorno y gestión de secretos
    steps:
      - uses: actions/checkout@v3

      - name: Login a GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar variables de tag
        id: vars
        run: echo "SHA_TAG=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Subir ProductService
        run: |
          IMAGE_URL=ghcr.io/${{ github.repository_owner }}/productserviceapi:${{ steps.vars.outputs.SHA_TAG }}
          docker tag productserviceapi:${{ steps.vars.outputs.SHA_TAG }} $IMAGE_URL
          docker push $IMAGE_URL

      - name: Subir OrderService
        run: |
          IMAGE_URL=ghcr.io/${{ github.repository_owner }}/orderserviceapi:${{ steps.vars.outputs.SHA_TAG }}
          docker tag orderserviceapi:${{ steps.vars.outputs.SHA_TAG }} $IMAGE_URL
          docker push $IMAGE_URL

      - name: Desplegar en Staging (Ejemplo con SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /ruta/a/tu/despliegue/staging
            # Asume que los archivos docker-compose.yml y .staging.yml están en el servidor
            # y que la variable de conexión a DB está definida en el entorno del servidor.
            docker compose \
                -f docker-compose.yml \
                -f docker-compose.staging.yml \
                -e ASPNETCORE_ENVIRONMENT=Staging \
                # Usar la variable de entorno real de Staging
                -e ConnectionStrings__DefaultConnection='${{ secrets.STAGING_DB_CONNECTION }}' \
                up -d --force-recreate
