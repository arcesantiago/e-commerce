name: CI/CD - E-Commerce Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    name: Build & Test (Microservices)
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      packages: write
    env:
      DOTNET_ENVIRONMENT: Staging
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Configurar Entorno de Pruebas (Soluci√≥n Final con Sleep y Exec)
        run: |
          # 1. Crear el docker-compose.test.yml (Eliminamos el healthcheck)
          cat <<EOF > docker-compose.test.yml
          version: '3.8'
          services:
            postgres-test:
              image: postgres:15-alpine
              container_name: postgres-test-ci # üîë Nombre simple para la CLI
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: Romari0!
                POSTGRES_DB: order
              ports:
                - "5432:5432"
          EOF
          
          echo "Levantando contenedor de PostgreSQL..."
          docker compose -f docker-compose.test.yml up -d --force-recreate postgres-test 
          
          echo "Esperando 45 segundos para el inicio completo de la DB..."
          sleep 45

          COUNT=0
          until docker exec postgres-test-ci pg_isready -h localhost -U postgres -d order; do
            echo "PostgreSQL no est√° listo (intentando $COUNT)..."
            sleep 5
            COUNT=$((COUNT + 1))
            if [ $COUNT -gt 6 ]; then # Fallar despu√©s de 30 segundos m√°s
              echo "FALLO: Timeout al esperar la base de datos."
              # Muestra logs si falla
              docker compose -f docker-compose.test.yml logs postgres-test
              exit 1
            fi
          done
          echo "PostgreSQL est√° listo."

      - name: Crear Base de Datos 'product'
        # Usamos el nombre expl√≠cito del contenedor que definimos en el compose file
        run: |
          docker exec postgres-test-ci psql -U postgres -d order -c "CREATE DATABASE product;" 
        env:
          PGPASSWORD: Romari0!

      - name: Ejecutar Tests para ProductService (Integraci√≥n)
        run: |
          dotnet test ProductService/ProductService.sln --configuration Release --verbosity normal

      - name: Ejecutar Tests para OrderService (Integraci√≥n)
        run: |
          dotnet test OrderService/OrderService.sln --configuration Release --verbosity normal
          
      - name: Limpiar Contenedor de Pruebas
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

      # --- El resto del flujo de Build/Deploy permanece igual ---

      - name: Configurar variables de tag
        id: vars
        run: echo "SHA_TAG=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Login a GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Construir y Taggear ProductService
        run: |
          docker build -t productserviceapi:${{ steps.vars.outputs.SHA_TAG }} -f ProductService/ProductService.API/Dockerfile .
          IMAGE_URL=ghcr.io/${{ github.repository_owner }}/productserviceapi:${{ steps.vars.outputs.SHA_TAG }}
          docker tag productserviceapi:${{ steps.vars.outputs.SHA_TAG }} $IMAGE_URL
          docker push $IMAGE_URL

      - name: Construir y Taggear OrderService
        run: |
          docker build -t orderserviceapi:${{ steps.vars.outputs.SHA_TAG }} -f OrderService/OrderService.API/Dockerfile .
          IMAGE_URL=ghcr.io/${{ github.repository_owner }}/orderserviceapi:${{ steps.vars.outputs.SHA_TAG }}
          docker tag orderserviceapi:${{ steps.vars.outputs.SHA_TAG }} $IMAGE_URL
          docker push $IMAGE_URL
          
  deploy-staging:
    name: Despliegue a Staging
    runs-on: ubuntu-latest
    needs: build-test
    environment: staging
    permissions:
      contents: read
      id-token: write 
    steps:
      - uses: actions/checkout@v3

      - name: Desplegar en Staging (Ejemplo con SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |

            SHA_TAG=$(echo ${{ github.sha }} | cut -c1-8)
            
            PRODUCT_IMAGE_URL=ghcr.io/${{ github.repository_owner }}/productserviceapi:$SHA_TAG
            ORDER_IMAGE_URL=ghcr.io/${{ github.repository_owner }}/orderserviceapi:$SHA_TAG
            
            cd /home/ec2-user/e-commerce/

            git pull origin main
            
            echo "${{ secrets.GHCR_PULL_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin
            
            export ASPNETCORE_ENVIRONMENT=Staging
            export PRODUCT_IMAGE_TAG=$PRODUCT_IMAGE_URL
            export ORDER_IMAGE_TAG=$ORDER_IMAGE_URL

            docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d --force-recreate
